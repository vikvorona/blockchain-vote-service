const express = require('express');
const mongoose = require('mongoose');
const router = express.Router();
const dotenv = require('dotenv');
dotenv.load();
const uri = process.env.URI;
const User = require("./user");
const Poll = require("./poll");
const jwtsecret = "mysecretkey"; // ключ для подписи JWT
const jwt = require('jsonwebtoken'); // аутентификация по JWT для hhtp
const passport = require('./passport');

const web3API = require('web3');

const web3 = new web3API(new web3API.providers.HttpProvider('http://localhost:8008'));

web3.eth.defaultAccount = web3.eth.accounts[0];

pollAbi = web3.eth.contract([{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"status","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"}],"name":"addAnswer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"index","type":"uint256"}],"name":"getCounts","outputs":[{"name":"","type":"string"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getAnswersCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"polls","outputs":[{"name":"answer","type":"string"},{"name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"}],"name":"vote","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"contractName","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]);

accountAbi = web3.eth.contract([{"constant":false,"inputs":[{"name":"pollAddress","type":"address"},{"name":"answer","type":"string"}],"name":"vote","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"polls","outputs":[{"name":"addr","type":"address"},{"name":"answer","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"index","type":"uint256"}],"name":"getPolls","outputs":[{"name":"","type":"address"},{"name":"","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"getPollsCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}]);

mongoose.connect(uri, function(err) {
	if (err) throw err;
	
	/*var newUser = new User({
		_id: new mongoose.Types.ObjectId(),
		username: "admin",
		password: "admin101",
		permissions: "admin",
		firstname: "Administrator",
		lastname: "Blockchain"
	})
	
	newUser.save(function(err) {
		if (err) throw err;
		
		console.log('New user saved.');
	})*/
	
	// Authenticate User
	router.post("/authenticate", async(request, response) => {
		await passport.authenticate('local', function (err, user) {
			if (user == false) {
				response.send({ error: 'Invalid password or username' });
			} else {
				//--payload - информация которую мы храним в токене и можем из него получать
				const payload = {
					id: user._id,
					username: user.username,
					permissions: user.permissions
				};
				const token = jwt.sign(payload, jwtsecret); //здесь создается JWT
				response.send({user: user.username, token: token});
			}
		})(request, response);
	});
	
	// Get Users list
	router.get("/users", async(request, response) => {
		await passport.authenticate('jwt', (err, user) => {
			if (user && user.permissions === "admin") {
				User.find({permissions: "user"}, (err, users) => {
					if (err) throw err;
					
					response.send(users);
				})
			} else {
				response.status(500).send({ error: "You don't have permissions for this action" });
			}
		})(request, response)
	});
	
	// Check User's token
	router.get("/checkUser", async(request, response) => {
		await passport.authenticate('jwt', (err, user) => {
			console.log(request);
			if (err) throw err;
			
			if (user) {
				response.send({ exists: true });
			} else {
				response.send({ exists: false });
			}
		})(request, response)
	});
	
	// Get User's notifications
	// TODO
	
	// Create User
	router.put("/createUser", async(request, response) => {
		await passport.authenticate('jwt', (err, user) => {
			if (user && user.permissions === "admin") {
				if (!request.body.username || !request.body.password) {
					response.status(500).send({ error: "Имя пользователя или пароль не заполнены." });
				} else {
					checkIfUserExists(request.body.username).then(() => {
						const contract = accountAbi.new({
							from: web3.eth.accounts[0],
							data: '0x6060604052341561000f57600080fd5b6109568061001e6000396000f30060606040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631bf533a41461007257806338cc483114610106578063ac2f00741461015b578063ce2dee051461022a578063e0995916146102f9575b600080fd5b341561007d57600080fd5b6100ec600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610322565b604051808215151515815260200191505060405180910390f35b341561011157600080fd5b610119610592565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561016657600080fd5b61017c600480803590602001909190505061059a565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101ee5780820151818401526020810190506101d3565b50505050905090810190601f16801561021b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b341561023557600080fd5b61024b6004808035906020019091905050610685565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156102bd5780820151818401526020810190506102a2565b50505050905090810190601f1680156102ea5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b341561030457600080fd5b61030c610795565b6040518082815260200191505060405180910390f35b600080600080600092505b6000805490508310156103c45760008381548110151561034957fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156103b75760009350610589565b828060010193505061032d565b8591508173ffffffffffffffffffffffffffffffffffffffff1663fc36e15b866040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561044f578082015181840152602081019050610434565b50505050905090810190601f16801561047c5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561049a57600080fd5b5af115156104a757600080fd5b50505060405180519050905060011515811515141561058457600080548060010182816104d491906107a1565b9160005260206000209060020201600060408051908101604052808a73ffffffffffffffffffffffffffffffffffffffff16815260200189815250909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906105779291906107d3565b5050505060019350610589565b600093505b50505092915050565b600030905090565b6000818154811015156105a957fe5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561067b5780601f106106505761010080835404028352916020019161067b565b820191906000526020600020905b81548152906001019060200180831161065e57829003601f168201915b5050505050905082565b600061068f610853565b60008381548110151561069e57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000848154811015156106df57fe5b9060005260206000209060020201600101808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107855780601f1061075a57610100808354040283529160200191610785565b820191906000526020600020905b81548152906001019060200180831161076857829003601f168201915b5050505050905091509150915091565b60008080549050905090565b8154818355818115116107ce576002028160020283600052602060002091820191016107cd9190610867565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061081457805160ff1916838001178555610842565b82800160010185558215610842579182015b82811115610841578251825591602001919060010190610826565b5b50905061084f91906108bd565b5090565b602060405190810160405280600081525090565b6108ba91905b808211156108b657600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006108ad91906108e2565b5060020161086d565b5090565b90565b6108df91905b808211156108db5760008160009055506001016108c3565b5090565b90565b50805460018160011615610100020316600290046000825580601f106109085750610927565b601f01602090049060005260206000209081019061092691906108bd565b5b505600a165627a7a72305820c2301f6a5521c62cb35ed131786d5b44e3f577b084b7bedf7b664f2e8f2181880029',
							gas: '4700000'
						}, function (e, contract) {
							console.log(e, contract);
							if (e) {
								throw e;
							}
							if (typeof contract.address !== 'undefined') {
								console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
								console.log(contract.address);
								var newUser = new User({
									_id: new mongoose.Types.ObjectId(),
									username: request.body.username,
									password: request.body.password,
									firstname: request.body.firstname,
									lastname: request.body.lastname,
									address: contract.address,
									permissions: "user"
								})
								newUser.save(function(err) {
									if (err) throw err;
									
									console.log('New user ', request.body.username, ' saved.');
									response.send();
								})
							}
						});
					}, (err) => {
						response.status(500).send({ error: "Пользователь с таким именем существует"});
					});
				}
			} else {
				response.status(500).send({ error: "You don't have permissions for this action" });
			}
		})(request, response)
	});
	
	// Get Polls list
	router.get("/polls", (request, response) => {
		Poll.find({status: "active"}, (err, polls) => {
			if (err) throw err;
			
			response.send(polls);
		});
	});
	
	// Get Bch Poll
	router.get("/poll", (request, response) => {
		Poll.findOne({name: request.query.name}, (err, poll) => {
			if (err) throw err;
			
			console.log('here we go address: ', poll.name, poll.address, request.query.name);
			const contract = pollAbi.at(poll.address);
			const answers = [];
			const count = contract.getAnswersCount();
			console.log('count', count);
			for (let i = 0; i < count; i++) {
				let obj = contract.getCounts(i);
				console.log(i, ': ', obj);
				answers.push(obj);
			}
			console.log({
				address: poll.address,
				answers: answers
			});
			response.send({
				address: poll.address,
				answers: answers
			});
		})
	});
	
	router.post("/vote", async(request, response) => {
		await passport.authenticate('jwt', (err, user) => {
			Poll.findOne({name: request.body.name}, (err, poll) => {
				if (err) throw err;
				
				if (poll) {
					const pollContract = pollAbi.at(poll.address);
					const contract = accountAbi.at(user.address);
					console.log('gonna vote by address ', pollContract.address, ' answer ', request.body.answer);
					const isSuccess = contract.vote(pollContract.address, request.body.answer.answer);
					console.log('voting ' , request.body.name, ' answer ', request.body.answer, ' success ', isSuccess);
					response.send(isSuccess);
				} else {
					response.status(400).send();
				}
			})
		})(request, response);
	});
	
	// Create Poll
	router.put("/createPoll", async(request, response) => {
		await passport.authenticate('jwt', (err, user) => {
			if (user && user.permissions === "admin") {
				if (!request.body.name) {
					response.status(500).send({ error: "Name and address of poll are required." });
				} else {
					const contract = pollAbi.new(
						request.body.name,
						{
							from: web3.eth.accounts[0],
							data: '0x6060604052341561000f57600080fd5b604051610df1380380610df1833981016040528080518201919050508060019080519060200190610041929190610094565b506040805190810160405280600681526020017f61637469766500000000000000000000000000000000000000000000000000008152506002908051906020019061008d929190610094565b5050610139565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100d557805160ff1916838001178555610103565b82800160010185558215610103579182015b828111156101025782518255916020019190600101906100e7565b5b5090506101109190610114565b5090565b61013691905b8082111561013257600081600090555060010161011a565b5090565b90565b610ca9806101486000396000f300606060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461009e57806317d7de7c1461012c578063200d2ed2146101ba57806338cc48311461024857806388775d8f1461029d578063999518fa146102fa5780639fecfe571461039d578063ac2f0074146103c6578063fc36e15b14610469575b600080fd5b34156100a957600080fd5b6100b16104de565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100f15780820151818401526020810190506100d6565b50505050905090810190601f16801561011e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013757600080fd5b61013f61057c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561017f578082015181840152602081019050610164565b50505050905090810190601f1680156101ac5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101c557600080fd5b6101cd610624565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561020d5780820151818401526020810190506101f2565b50505050905090810190601f16801561023a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561025357600080fd5b61025b6106c2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102a857600080fd5b6102f8600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506106ca565b005b341561030557600080fd5b61031b6004808035906020019091905050610736565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610361578082015181840152602081019050610346565b50505050905090810190601f16801561038e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34156103a857600080fd5b6103b0610825565b6040518082815260200191505060405180910390f35b34156103d157600080fd5b6103e76004808035906020019091905050610831565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561042d578082015181840152602081019050610412565b50505050905090810190601f16801561045a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b341561047457600080fd5b6104c4600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506108fc565b604051808215151515815260200191505060405180910390f35b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105745780601f1061054957610100808354040283529160200191610574565b820191906000526020600020905b81548152906001019060200180831161055757829003601f168201915b505050505081565b610584610b13565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561061a5780601f106105ef5761010080835404028352916020019161061a565b820191906000526020600020905b8154815290600101906020018083116105fd57829003601f168201915b5050505050905090565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106ba5780601f1061068f576101008083540402835291602001916106ba565b820191906000526020600020905b81548152906001019060200180831161069d57829003601f168201915b505050505081565b600030905090565b600080548060010182816106de9190610b27565b916000526020600020906002020160006040805190810160405280858152602001600081525090919091506000820151816000019080519060200190610725929190610b59565b506020820151816001015550505050565b61073e610b13565b6000808381548110151561074e57fe5b906000526020600020906002020160000160008481548110151561076e57fe5b906000526020600020906002020160010154818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108155780601f106107ea57610100808354040283529160200191610815565b820191906000526020600020905b8154815290600101906020018083116107f857829003601f168201915b5050505050915091509150915091565b60008080549050905090565b60008181548110151561084057fe5b9060005260206000209060020201600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108ec5780601f106108c1576101008083540402835291602001916108ec565b820191906000526020600020905b8154815290600101906020018083116108cf57829003601f168201915b5050505050908060010154905082565b60008060405180807f61637469766500000000000000000000000000000000000000000000000000008152506006019050604051809103902060001916600260405180828054600181600116156101000203166002900480156109965780601f10610974576101008083540402835291820191610996565b820191906000526020600020905b815481529060010190602001808311610982575b50509150506040518091039020600019161415156109b75760009150610b0d565b600090505b600080549050811015610b08576000818154811015156109d857fe5b90600052602060002090600202016000016040518082805460018160011615610100020316600290048015610a445780601f10610a22576101008083540402835291820191610a44565b820191906000526020600020905b815481529060010190602001808311610a30575b5050915050604051809103902060001916836040518082805190602001908083835b602083101515610a8b5780518252602082019150602081019050602083039250610a66565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415610afb57600081815481101515610ad157fe5b90600052602060002090600202016001016000815480929190600101919050555060019150610b0d565b80806001019150506109bc565b600091505b50919050565b602060405190810160405280600081525090565b815481835581811511610b5457600202816002028360005260206000209182019101610b539190610bd9565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b9a57805160ff1916838001178555610bc8565b82800160010185558215610bc8579182015b82811115610bc7578251825591602001919060010190610bac565b5b509050610bd59190610c10565b5090565b610c0d91905b80821115610c095760008082016000610bf89190610c35565b600182016000905550600201610bdf565b5090565b90565b610c3291905b80821115610c2e576000816000905550600101610c16565b5090565b90565b50805460018160011615610100020316600290046000825580601f10610c5b5750610c7a565b601f016020900490600052602060002090810190610c799190610c10565b5b505600a165627a7a72305820edb9a17b084bf439da0a7d59723951a85fa913db5766c5cabfbaa585ff9890ce0029',
							gas: '4700000'
						}, function (e, contract) {
							if (e) {
								throw e;
							}
							if (typeof contract.address !== 'undefined') {
								console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
								console.log(contract.address);
								request.body.answers.forEach((ans) => {
									contract.addAnswer(ans);
									console.log('Answer added: ', ans);
								});
								var newPoll = new Poll({
									_id: new mongoose.Types.ObjectId(),
									name: request.body.name,
									address: contract.address,
									status: "active",
									startDate: new Date()
								})
								newPoll.save(function(err) {
									if (err) throw err;
									
									console.log('New poll ', request.body.name, ' saved.');
									response.send();
								})
							}
						}
					);
				}
			} else {
				response.status(500).send({ error: "You don't have permissions for this action" });
			}
		})(request, response)
	});
	
	// Change user's password
	router.put("/changePassword", async(request, response) => {
		await passport.authenticate('jwt', (err, user) => {
			if (user && user.permissions === "admin") {
				if (!request.body.username || !request.body.password) {
					throw "Empty username or/and password";
				}
				User.findOne({username: request.body.username}, (err, user) => {
					if (user) {
						user.password = request.body.password;
						user.save();
						console.log("Password of ", request.body.username, " was changed.")
						response.send();
					} else {
						response.status(500).send({ error: "No such user"});
					}
				})
			} else {
				response.status(500).send({ error: "You don't have permissions for this action" });
			}
		})(request, response)
	});
	
	// Remove User
	router.delete("/deleteUser", async(request, response) => {
		await passport.authenticate('jwt', (err, user) => {
			if (user && user.permissions === "admin") {
				User.remove({username: request.query.username}, (err) => {
					if (err) throw err;
					console.log('User ', request.query.username, ' removed.')
					response.send();
				})
			} else {
				response.status(500).send({ error: "You don't have permissions for this action" });
			}
		})(request, response)
	});
});

function checkIfUserExists(username) {
	var exists = new Promise((resolve, reject) => {
		User.find({ username: username}, (err, users) => {
			if (err) throw err;
			
			users.length ? reject() : resolve();
		});
	});
	
	return exists;
}

module.exports = router;